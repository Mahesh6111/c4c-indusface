import os
import subprocess
import json
import time,datetime
import datetime
import base64
import hmac
import hashlib
import requests
import logging


 

import azure.functions as func

 


def main(mytimer: func.TimerRequest) -> None:
    utc_timestamp = datetime.datetime.utcnow().replace(
        tzinfo=datetime.timezone.utc).isoformat()

 

    if mytimer.past_due:
        logging.info('The timer is past due!')
    logging.info('Python timer trigger function ran at %s', utc_timestamp)
    path = os.getcwd()
    now = datetime.datetime.now()
    now1 = now + datetime.timedelta(hours=-5, minutes=-30)
    #print (now1)
    start_time = time.mktime(now1.timetuple())
    start_time = int(round(start_time)*1000)
    #print (start_time) 
    prev_time = now1 + datetime.timedelta(minutes=-5)
    prev_time = time.mktime(prev_time.timetuple())
    prev_time = int(round(prev_time)*1000)
    #print (prev_time)
    future_time = now1 + datetime.timedelta(minutes=5)
    future_time = time.mktime(future_time.timetuple())
    future_time = int(round(future_time)*1000)
    #print (future_time)
    customer_id = "a5160d63-8dcf-4829-8399-3e2311c7f62d"
    shared_key = "QS3Ul+4EECTNXHzJ1POvrX/DCOu1N74ot7mBbSx1Aw3PNXLc+0BDIiZWl4FIx5kEN6DYb0QcNLUChoEzy+MlJQ=="
    log_type = "Indusface"
    #iteams = process(start_time,prev_time,future_time,customer_id,shared_key,log_type)


    def get_data(prev_time,start_time):
            #######URL to get Auth token###########
            resp = requests.post("https://tas.indusface.com/wafportal/rest/siem/v1/getAuthToken",headers={"Content-Type": "application/x-www-form-urlencoded"},auth=('APIKEYh4UL3996', 'HX2J71XBBNgxLqD26cA5qGtAkHsY6mZC'))
            token = resp.json()
            get_token = token['access_token'].rstrip()
            #######URL to get response###########
            header = {"Content-Type": "application/json", "Authorization": f"Bearer {get_token}"}
            payload = {"startTime": prev_time, "endTime": start_time}
            #print(payload)
            resp1 = requests.post("https://tas.indusface.com/wafportal/rest/siem/v1/getAttackInfo", headers = header, data=json.dumps(payload))
            # print(resp1.content)
            return(resp1.content)

 

    def build_signature(
        customer_id, shared_key, date, content_length, method, content_type, resource
    ):
        x_headers = "x-ms-date:" + date
        string_to_hash = (
            method
            + "\n"
            + str(content_length)
            + "\n"
            + content_type
            + "\n"
            + x_headers
            + "\n"
            + resource
        )
        bytes_to_hash = bytes(string_to_hash, encoding="utf-8")
        decoded_key = base64.b64decode(shared_key)
        encoded_hash = base64.b64encode(
            hmac.new(decoded_key, bytes_to_hash, digestmod=hashlib.sha256).digest()
        ).decode()
        authorization = "SharedKey {}:{}".format(customer_id, encoded_hash)
        return authorization

 


    def post_data(customer_id, shared_key, get_responce_v, log_type):
        method = "POST"
        content_type = "application/json"
        resource = "/api/logs"
        rfc1123date = datetime.datetime.utcnow().strftime("%a, %d %b %Y %H:%M:%S GMT")
        content_length = len(get_responce_v)
        signature = build_signature(
            customer_id,
            shared_key,
            rfc1123date,
            content_length,
            method,
            content_type,
            resource,
        )
        uri = (
            "https://"
            + customer_id
            + ".ods.opinsights.azure.com"
            + resource
            + "?api-version=2016-04-01"
        )

 

        headers = {
            "content-type": content_type,
            "Authorization": signature,
            "Log-Type": log_type,
            "x-ms-date": rfc1123date,
        }

 

        response = requests.post(uri, data=get_responce_v, headers=headers)
        return response.status_code
    get_responce_v = get_data(prev_time ,start_time)
    print (get_responce_v)
    senddata = post_data(customer_id, shared_key, get_responce_v, log_type)
    logging.info('events have been successfully sent to Azure Sentinel')
